faa0257c843b4b765b9a055152922756
"use strict";var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = createReducer;var _lodash = _interopRequireDefault(require("lodash.isequal"));
var _reactNavigation = require("react-navigation");
var ActionConst = _interopRequireWildcard(require("./ActionConst"));
var _State = require("./State");

function createReducer() {
  return function (state, action) {
    var navigationStore = require('./navigationStore').default;var
    type = action.type,routeName = action.routeName;
    if (type === ActionConst.POP_TO) {
      var nextScene = '';
      var newState = state;
      var currentState = state;
      while (newState && nextScene !== routeName) {
        newState = navigationStore.getStateForAction(_reactNavigation.StackActions.pop(), currentState);
        if (newState) {
          nextScene = (0, _State.getActiveState)(newState).routeName;
          if ((0, _lodash.default)(currentState, newState)) {
            console.warn("popTo called with an unknown routeName: " + routeName);
            break;
          }
          if (nextScene !== routeName) {
            currentState = newState;
          }
        }
      }
      return nextScene === routeName ? newState : state;
    }
    if (type === ActionConst.REPLACE) {
      var _newState = navigationStore.getStateForAction(
      _reactNavigation.NavigationActions.navigate({
        routeName: routeName,
        params: action.params }),

      state);

      var res = (0, _State.popPrevious)(_newState, routeName);
      return res;
    }
    return navigationStore.getStateForAction(action, state) || state;
  };
}