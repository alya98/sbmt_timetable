d67260a0cb940c1d758cd42cf5e19cf3
'use strict';











function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new (require('./InterceptorManager'))(),
    response: new (require('./InterceptorManager'))() };

}






Axios.prototype.request = function request(config) {


  if (typeof config === 'string') {
    config = require('./../utils').merge({
      url: arguments[0] },
    arguments[1]);
  }

  config = require('./../utils').merge(require('./../defaults'), { method: 'get' }, this.defaults, config);
  config.method = config.method.toLowerCase();


  var chain = [require('./dispatchRequest'), undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};


require('./../utils').forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {

  Axios.prototype[method] = function (url, config) {
    return this.request(require('./../utils').merge(config || {}, {
      method: method,
      url: url }));

  };
});

require('./../utils').forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {

  Axios.prototype[method] = function (url, data, config) {
    return this.request(require('./../utils').merge(config || {}, {
      method: method,
      url: url,
      data: data }));

  };
});

module.exports = Axios;