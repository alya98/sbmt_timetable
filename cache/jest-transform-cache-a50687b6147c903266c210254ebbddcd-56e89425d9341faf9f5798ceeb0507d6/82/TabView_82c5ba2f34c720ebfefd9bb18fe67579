f53aa7676cda1f31ea90b373cd3d902a
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeTabView = require("react-native-tab-view");
var _reactNavigation = require("react-navigation");var _jsxFileName = "/Users/mac-185-71/Projects/sbmt_timetable/node_modules/react-navigation-deprecated-tab-navigator/src/views/TabView.js";var

TabView = function (_React$PureComponent) {(0, _inherits2.default)(TabView, _React$PureComponent);function TabView() {var _getPrototypeOf2;var _this;(0, _classCallCheck2.default)(this, TabView);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf2.default)(TabView)).call.apply(_getPrototypeOf2, [this].concat(args)));_this.









    _handlePageChanged = function (index) {var
      routeName = _this.props.navigation.state.routes[index].routeName;
      _this.props.navigation.dispatch(_reactNavigation.NavigationActions.navigate({ routeName: routeName }));
    };_this.

    _renderScene = function (_ref) {var route = _ref.route;var _this$props =
      _this.props,screenProps = _this$props.screenProps,navigation = _this$props.navigation,descriptors = _this$props.descriptors;var _this$props$navigatio =





      _this.props.navigationConfig,lazy = _this$props$navigatio.lazy,removeClippedSubviews = _this$props$navigatio.removeClippedSubviews,animationEnabled = _this$props$navigatio.animationEnabled,swipeEnabled = _this$props$navigatio.swipeEnabled;
      var descriptor = descriptors[route.key];
      var focusedIndex = navigation.state.index;
      var focusedKey = navigation.state.routes[focusedIndex].key;
      var key = route.key;
      var TabComponent = descriptor.getComponent();
      return (
        _react.default.createElement(_reactNavigation.ResourceSavingSceneView, {
          lazy: lazy,
          isFocused: focusedKey === key,
          removeClippedSubViews: removeClippedSubviews,
          animationEnabled: animationEnabled,
          swipeEnabled: swipeEnabled,
          screenProps: screenProps,
          component: TabComponent,
          navigation: navigation,
          childNavigation: descriptor.navigation, __source: { fileName: _jsxFileName, lineNumber: 35 } }));


    };_this.

    _getLabel = function (_ref2) {var route = _ref2.route,tintColor = _ref2.tintColor,focused = _ref2.focused;var _this$props2 =
      _this.props,screenProps = _this$props2.screenProps,descriptors = _this$props2.descriptors;
      var descriptor = descriptors[route.key];
      var options = descriptor.options;

      if (options.tabBarLabel) {
        return typeof options.tabBarLabel === 'function' ?
        options.tabBarLabel({ tintColor: tintColor, focused: focused }) :
        options.tabBarLabel;
      }

      if (typeof options.title === 'string') {
        return options.title;
      }

      return route.routeName;
    };_this.

    _getOnPress = function (previousScene, _ref3) {var route = _ref3.route;var
      descriptors = _this.props.descriptors;
      var descriptor = descriptors[route.key];
      var options = descriptor.options;

      return options.tabBarOnPress;
    };_this.

    _getTestIDProps = function (_ref4) {var route = _ref4.route;var
      descriptors = _this.props.descriptors;
      var descriptor = descriptors[route.key];
      var options = descriptor.options;

      return typeof options.tabBarTestIDProps === 'function' ?
      options.tabBarTestIDProps({ focused: focused }) :
      options.tabBarTestIDProps;
    };_this.

    _renderIcon = function (_ref5) {var focused = _ref5.focused,route = _ref5.route,tintColor = _ref5.tintColor;var
      descriptors = _this.props.descriptors;
      var descriptor = descriptors[route.key];
      var options = descriptor.options;

      if (options.tabBarIcon) {
        return typeof options.tabBarIcon === 'function' ?
        options.tabBarIcon({ tintColor: tintColor, focused: focused }) :
        options.tabBarIcon;
      }
      return null;
    };_this.

    _renderTabBar = function (props) {var _this$props$navigatio2 =





      _this.props.navigationConfig,tabBarOptions = _this$props$navigatio2.tabBarOptions,TabBarComponent = _this$props$navigatio2.tabBarComponent,animationEnabled = _this$props$navigatio2.animationEnabled,tabBarPosition = _this$props$navigatio2.tabBarPosition;
      if (typeof TabBarComponent === 'undefined') {
        return null;
      }

      return (
        _react.default.createElement(TabBarComponent, (0, _extends2.default)({},
        props,
        tabBarOptions, {
          tabBarPosition: tabBarPosition,
          screenProps: _this.props.screenProps,
          navigation: _this.props.navigation,
          getLabel: _this._getLabel,
          getTestIDProps: _this._getTestIDProps,
          getOnPress: _this._getOnPress,
          renderIcon: _this._renderIcon,
          animationEnabled: animationEnabled, __source: { fileName: _jsxFileName, lineNumber: 110 } })));


    };_this.

    _renderPager = function (props) {return _react.default.createElement(_reactNativeTabView.TabViewPagerPan, (0, _extends2.default)({}, props, { __source: { fileName: _jsxFileName, lineNumber: 125 } }));};return _this;}(0, _createClass2.default)(TabView, [{ key: "render", value: function render()

    {var _this$props$navigatio3 =






      this.props.navigationConfig,tabBarComponent = _this$props$navigatio3.tabBarComponent,tabBarPosition = _this$props$navigatio3.tabBarPosition,animationEnabled = _this$props$navigatio3.animationEnabled,configureTransition = _this$props$navigatio3.configureTransition,initialLayout = _this$props$navigatio3.initialLayout;

      var renderHeader;
      var renderFooter;
      var renderPager;var

      state = this.props.navigation.state;
      var route = state.routes[state.index];var
      descriptors = this.props.descriptors;
      var descriptor = descriptors[route.key];
      var options = descriptor.options;

      var tabBarVisible =
      options.tabBarVisible == null ? true : options.tabBarVisible;

      var swipeEnabled =
      options.swipeEnabled == null ?
      this.props.navigationConfig.swipeEnabled :
      options.swipeEnabled;

      if (typeof swipeEnabled === 'function') {
        swipeEnabled = swipeEnabled(state);
      }

      if (tabBarComponent !== undefined && tabBarVisible) {
        if (tabBarPosition === 'bottom') {
          renderFooter = this._renderTabBar;
        } else {
          renderHeader = this._renderTabBar;
        }
      }

      if (
      animationEnabled === false && swipeEnabled === false ||
      typeof configureTransition === 'function')
      {
        renderPager = this._renderPager;
      }

      var props = {
        initialLayout: initialLayout,
        animationEnabled: animationEnabled,
        configureTransition: configureTransition,
        swipeEnabled: swipeEnabled,
        renderPager: renderPager,
        renderHeader: renderHeader,
        renderFooter: renderFooter,
        renderScene: this._renderScene,
        onIndexChange: this._handlePageChanged,
        navigationState: this.props.navigation.state,
        style: styles.container };


      return _react.default.createElement(_reactNativeTabView.TabViewAnimated, (0, _extends2.default)({}, props, { __source: { fileName: _jsxFileName, lineNumber: 187 } }));
    } }]);return TabView;}(_react.default.PureComponent);TabView.defaultProps = { lazy: true, removedClippedSubviews: true, initialLayout: _reactNative.Platform.select({ android: { width: 1, height: 0 } }) };var _default =


TabView;exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1 } });