1e73cf772d11bf7d4147142014c563e3
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeTabView = require("react-native-tab-view");
var _TabBarIcon = _interopRequireDefault(require("./TabBarIcon"));var _jsxFileName = "/Users/mac-185-71/Projects/sbmt_timetable/node_modules/react-navigation-deprecated-tab-navigator/src/views/TabBarTop.js";var

TabBarTop = function (_React$PureComponent) {(0, _inherits2.default)(TabBarTop, _React$PureComponent);function TabBarTop() {var _getPrototypeOf2;var _this;(0, _classCallCheck2.default)(this, TabBarTop);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf2.default)(TabBarTop)).call.apply(_getPrototypeOf2, [this].concat(args)));_this.









    _renderLabel = function (scene) {var _this$props =










      _this.props,position = _this$props.position,tabBarPosition = _this$props.tabBarPosition,navigation = _this$props.navigation,activeTintColor = _this$props.activeTintColor,inactiveTintColor = _this$props.inactiveTintColor,showLabel = _this$props.showLabel,upperCaseLabel = _this$props.upperCaseLabel,labelStyle = _this$props.labelStyle,allowFontScaling = _this$props.allowFontScaling;
      if (showLabel === false) {
        return null;
      }var
      index = scene.index;var
      routes = navigation.state.routes;

      var inputRange = [-1].concat((0, _toConsumableArray2.default)(routes.map(function (x, i) {return i;})));
      var outputRange = inputRange.map(
      function (inputIndex) {return inputIndex === index ? activeTintColor : inactiveTintColor;});

      var color = position.interpolate({
        inputRange: inputRange,
        outputRange: outputRange });


      var tintColor = scene.focused ? activeTintColor : inactiveTintColor;
      var label = _this.props.getLabel((0, _objectSpread2.default)({}, scene, { tintColor: tintColor }));
      if (typeof label === 'string') {
        return (
          _react.default.createElement(_reactNative.Animated.Text, {
            style: [styles.label, { color: color }, labelStyle],
            allowFontScaling: allowFontScaling, __source: { fileName: _jsxFileName, lineNumber: 47 } },
          upperCaseLabel ? label.toUpperCase() : label));


      }
      if (typeof label === 'function') {
        return label((0, _objectSpread2.default)({}, scene, { tintColor: tintColor }));
      }

      return label;
    };_this.

    _renderIcon = function (scene) {var _this$props2 =








      _this.props,position = _this$props2.position,navigation = _this$props2.navigation,activeTintColor = _this$props2.activeTintColor,inactiveTintColor = _this$props2.inactiveTintColor,renderIcon = _this$props2.renderIcon,showIcon = _this$props2.showIcon,iconStyle = _this$props2.iconStyle;
      if (showIcon === false) {
        return null;
      }
      return (
        _react.default.createElement(_TabBarIcon.default, {
          position: position,
          navigation: navigation,
          activeTintColor: activeTintColor,
          inactiveTintColor: inactiveTintColor,
          renderIcon: renderIcon,
          scene: scene,
          style: [styles.icon, iconStyle], __source: { fileName: _jsxFileName, lineNumber: 75 } }));


    };_this.

    _handleOnPress = function (scene) {var _this$props3 =
      _this.props,getOnPress = _this$props3.getOnPress,jumpToIndex = _this$props3.jumpToIndex,navigation = _this$props3.navigation;
      var previousScene = navigation.state.routes[navigation.state.index];
      var onPress = getOnPress(previousScene, scene);

      if (onPress) {



        onPress({
          previousScene: previousScene,
          scene: scene,
          jumpToIndex: jumpToIndex,
          defaultHandler: jumpToIndex });

      } else {
        jumpToIndex(scene.index);
      }
    };return _this;}(0, _createClass2.default)(TabBarTop, [{ key: "render", value: function render()

    {

      var props = this.props;

      return (
        _react.default.createElement(_reactNativeTabView.TabBar, (0, _extends2.default)({},
        props, {
          onTabPress: this._handleOnPress,
          jumpToIndex: function jumpToIndex() {},
          renderIcon: this._renderIcon,
          renderLabel: this._renderLabel, __source: { fileName: _jsxFileName, lineNumber: 112 } })));


    } }]);return TabBarTop;}(_react.default.PureComponent);exports.default = TabBarTop;TabBarTop.defaultProps = { activeTintColor: '#fff', inactiveTintColor: '#fff', showIcon: false, showLabel: true, upperCaseLabel: true, allowFontScaling: true };


var styles = _reactNative.StyleSheet.create({
  icon: {
    height: 24,
    width: 24 },

  label: {
    textAlign: 'center',
    fontSize: 13,
    margin: 8,
    backgroundColor: 'transparent' } });